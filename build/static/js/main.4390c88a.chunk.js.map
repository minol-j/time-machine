{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["clicks","App","React","useState","time","setTime","timerOn","setTimerOn","getStartButton","document","getElementById","setNameStartButton","name","innerHTML","useEffect","idTimer","interval","setInterval","prevTime","clearInterval","className","id","Math","floor","slice","onClick","innerText","console","log","setTimeout","clearTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gNAGIA,EAAS,EAsFEC,EApFH,WACV,MAAwBC,IAAMC,SAAS,GAAvC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BH,IAAMC,UAAS,GAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KAGA,SAASC,IACP,OAAOC,SAASC,eAAe,OAGjC,SAASC,EAAmBC,GAC1BJ,IAAiBK,UAAYD,EAe/BV,IAAMY,WAAU,WACNL,SAASC,eAAe,UAMlC,IAAIK,EAAU,EAkCd,OAbAb,IAAMY,WAAU,WACd,IAAIE,EAAW,KAQf,OAPIV,EACFU,EAAWC,aAAY,WACrBZ,GAAQ,SAACa,GAAD,OAAcA,EAAW,QAChC,IACOZ,GACVa,cAAcH,GAET,kBAAMG,cAAcH,MAC1B,CAACV,IAIF,sBAAKc,UAAU,SAAf,UACE,6CACA,sBAAKC,GAAG,UAAR,UACE,kCAAQ,IAAMC,KAAKC,MAAOnB,EAAO,KAAW,KAAKoB,OAAO,GAAxD,OACA,kCAAQ,IAAMF,KAAKC,MAAOnB,EAAO,IAAS,KAAKoB,OAAO,GAAtD,OACA,gCAAQ,IAAMF,KAAKC,MAAOnB,EAAO,IAAQ,KAAKoB,OAAO,QAGvD,sBAAKJ,UAAU,YAAf,UACE,wBAAQC,GAAG,MAAMI,QAAS,WA7DL,UADVjB,IACJkB,WACTf,EAAmB,QACnBJ,GAAW,KAGXI,EAAmB,SACnBN,EAAQ,GACRE,GAAW,KAsDT,mBACA,wBAAQkB,QAAS,kBAAMpB,EAAQ,IAA/B,mBACA,wBAAQoB,QAAS,kBA3CrBzB,IACA2B,QAAQC,IAAI5B,GACI,IAAZe,IACFA,EAAUc,YAAW,WACnB7B,EAAS,EACTe,EAAU,IACT,WAGU,IAAXf,IACF8B,aAAaf,GAEbf,EAAS,EACTO,GAAW,GACXI,EAAmB,YA6BjB,yBCvEOoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASC,eAAe,SAM1BqB,K","file":"static/js/main.4390c88a.chunk.js","sourcesContent":["import React from \"react\";\nimport './App.css'\n\nlet clicks = 0;\n\nconst App = () => {\n  const [time, setTime] = React.useState(0);\n  const [timerOn, setTimerOn] = React.useState(false);\n\n\n  function getStartButton() {\n    return document.getElementById('btn');\n  }\n\n  function setNameStartButton(name) {\n    getStartButton().innerHTML = name;\n  }\n\n  function startStop() {\n    const button = getStartButton()\n    if (button.innerText === \"Start\") {\n      setNameStartButton(\"Stop\");\n      setTimerOn(true);\n    }\n    else {\n      setNameStartButton(\"Start\");\n      setTime(0);\n      setTimerOn(false);\n    }\n  };\n  React.useEffect(() => {\n    var s = document.getElementById(\"snd\");\n    if (s == null) return;\n\n\n  });\n\n  let idTimer = 0;\n\n  function wait() {\n    clicks++;\n    console.log(clicks);\n    if (idTimer === 0) {\n      idTimer = setTimeout(() => {\n        clicks = 0;\n        idTimer = 0;\n      }, 300);\n    }\n\n    if (clicks === 2) {\n      clearTimeout(idTimer);\n\n      clicks = 0;\n      setTimerOn(false);\n      setNameStartButton(\"Start\");\n    }\n  }\n\n  React.useEffect(() => {\n    let interval = null;\n    if (timerOn) {\n      interval = setInterval(() => {\n        setTime((prevTime) => prevTime + 10);\n      }, 10);\n    } else if (!timerOn) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [timerOn]);\n\n\n  return (\n    <div className=\"Timers\">\n      <h1>TimeMachine</h1>\n      <div id=\"display\">\n        <span>{(\"0\" + Math.floor((time / 3600000) % 24)).slice(-2)}:</span>\n        <span>{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}:</span>\n        <span>{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}</span>\n      </div>\n\n      <div className=\"btn-group\">\n        <button id=\"btn\" onClick={() => startStop()}>Start</button>\n        <button onClick={() => setTime(0)}>Reset</button>\n        <button onClick={() => wait()}>Wait</button>\n      </div>\n    </div >\n  );\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}